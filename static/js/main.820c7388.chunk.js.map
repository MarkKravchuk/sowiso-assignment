{"version":3,"sources":["components/Header.js","components/ResultAlert.js","components/Excercise.js","App.js","index.js"],"names":["Header","className","href","alt","src","id","ResultAlert","resultValue","inputValue","shuffleCountValues","length","onClick","Exercise","countValues","useState","resultInput","setResultInput","result","a","b","toString","type","value","onChange","e","target","getRandomValues","Math","floor","random","App","setCountValues","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAoBeA,EAjBA,WACX,OAAO,qBAAKC,UAAW,SAAhB,SACH,+BACI,6BACI,qBAAKA,UAAU,OAAf,SACI,mBAAGC,KAAK,wBAAR,SACI,qBAAKC,IAAI,eAAeC,IAAI,+CAIxC,oBAAIC,GAAI,QAAR,SACI,+ECmBDC,G,YA5BK,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,mBAE3C,OAAID,EAAWE,OAASH,EAAYG,OAAe,KAE/CH,IAAgBC,EAET,sBAAKP,UAAW,gBAAhB,6CAEH,wBACIA,UAAW,SACXU,QAAS,kBAAMF,KAFnB,wBAQG,qBAAKR,UAAW,eAAhB,0DCkBAW,EAlCE,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,YAAaJ,EAAwB,EAAxBA,mBAC5B,EAAsCK,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAGMC,GAAUJ,EAAYK,EAAIL,EAAYM,GAAGC,WAE/C,OAAO,sBAAKnB,UAAW,OAAhB,UACH,oEACA,sBAAKA,UAAW,iBAAhB,UACI,+BAAKY,EAAYK,EAAjB,MAAuBL,EAAYM,EAAnC,SACA,uBACIE,KAAM,SACNC,MAAOP,EACPQ,SAAU,SAACC,GACPR,EAAeQ,EAAEC,OAAOH,aAIpC,cAAC,EAAD,CACIf,YAAaU,EACbT,WAAYO,EACZN,mBAAoB,WAChBO,EAAe,IACfP,WCFhB,SAASiB,IACL,MAAO,CACHR,EAAGS,KAAKC,MAAsB,IAAhBD,KAAKE,UACnBV,EAAGQ,KAAKC,MAAsB,IAAhBD,KAAKE,WAIZC,MA3Bf,WAII,MAAsChB,mBAASY,GAA/C,mBAAOb,EAAP,KAAoBkB,EAApB,KAEA,OACI,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,CACIlB,YAAaA,EACbJ,mBAAoB,WAEhBsB,EAAeL,UCdnCM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.820c7388.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Header.css'\r\n\r\nconst Header = () => {\r\n    return <div className={'header'}>\r\n        <ul>\r\n            <li>\r\n                <div className=\"logo\">\r\n                    <a href=\"https://sowiso.nl/en/\">\r\n                        <img alt=\"company logo\" src=\"https://sowiso.nl/images/logo-cl.svg\"/>\r\n                    </a>\r\n                </div>\r\n            </li>\r\n            <li id={'title'}>\r\n                <p>Count exercise for technical interview</p>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './ResultAlert.css'\r\n\r\nconst ResultAlert = ({resultValue, inputValue, shuffleCountValues}) => {\r\n    // if user has not filled in the full answer yet\r\n    if (inputValue.length < resultValue.length) return null;\r\n\r\n    if (resultValue === inputValue) {\r\n        // if user solved correctly\r\n        return <div className={\"alert success\"}>\r\n            Good job! The answer is correct!\r\n            <button\r\n                className={\"button\"}\r\n                onClick={() => shuffleCountValues()}>\r\n                Restart\r\n            </button>\r\n        </div>\r\n    } else {\r\n        // if user`s solution is wrong\r\n        return <div className={\"alert danger\"}>\r\n            The answer is incomplete, be more careful.\r\n        </div>\r\n    }\r\n}\r\n\r\nResultAlert.propTypes = {\r\n    resultValue: PropTypes.string.isRequired,\r\n    inputValue: PropTypes.string.isRequired,\r\n    shuffleCountValues: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ResultAlert;\r\n\r\n","import React, {useState} from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport './Excercise.css'\r\nimport ResultAlert from \"./ResultAlert\";\r\n\r\nconst Exercise = ({countValues, shuffleCountValues}) => {\r\n    const [resultInput, setResultInput] = useState(\"\")\r\n\r\n    // getting correct result\r\n    const result = (countValues.a + countValues.b).toString()\r\n\r\n    return <div className={'main'}>\r\n        <h1>Solve the following count problem:</h1>\r\n        <div className={'exercise-input'}>\r\n            <h1>{countValues.a} + {countValues.b} = </h1>\r\n            <input\r\n                type={\"number\"}\r\n                value={resultInput}\r\n                onChange={(e) => {\r\n                    setResultInput(e.target.value)\r\n                }}\r\n            />\r\n        </div>\r\n        <ResultAlert\r\n            resultValue={result}\r\n            inputValue={resultInput}\r\n            shuffleCountValues={() => {\r\n                setResultInput(\"\")\r\n                shuffleCountValues();\r\n            }}\r\n        />\r\n    </div>\r\n}\r\n\r\nExercise.propTypes = {\r\n    countValues: PropTypes.object.isRequired,\r\n    shuffleCountValues: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Exercise;\r\n","import {useState} from \"react\";\nimport './App.css'\n\nimport Header from \"./components/Header\";\nimport Exercise from \"./components/Excercise\";\n\nfunction App() {\n    // Generating count values\n    // Generating these values inside of child component\n    // would trigger changing values each time when user enters a value\n    const [countValues, setCountValues] = useState(getRandomValues)\n\n    return (\n        <>\n            <Header/>\n            <Exercise\n                countValues={countValues}\n                shuffleCountValues={() => {\n                    // updating initial numbers to add\n                    setCountValues(getRandomValues)\n                }}\n            />\n        </>\n    );\n}\n\nfunction getRandomValues() {\n    return {\n        a: Math.floor(Math.random() * 100),\n        b: Math.floor(Math.random() * 100)\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}